name: Container Security Scan

on:
  # Allow manual triggering
  workflow_dispatch:
  
  # Run automatically once a day at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'

jobs:
  container-scan:
    name: Scan SuperTokens PostgreSQL Container
    runs-on: ubuntu-latest
    
    steps:
      - name: Run Azure Container Scan
        id: container-scan
        uses: Azure/container-scan@v0
        with:
          image-name: supertokens/supertokens-postgresql:latest
          severity-threshold: LOW
          run-quality-checks: false
        env:
          # Set any environment variables if needed
          DOCKER_CONTENT_TRUST: 1
      
      - name: Generate Security Summary
        id: security-summary
        if: always()
        run: |
          echo "## Container Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** supertokens/supertokens-postgresql:latest" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get the scan report path from the container scan output
          SCAN_REPORT_PATH="${{ steps.container-scan.outputs.scan-report-path }}"
          
          if [ -f "$SCAN_REPORT_PATH" ]; then
            echo "### Vulnerabilities Found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Count vulnerabilities by severity using the correct JSON structure
            critical=$(jq '[.vulnerabilities[]? | select(.severity == "CRITICAL")] | length' "$SCAN_REPORT_PATH" 2>/dev/null || echo "0")
            high=$(jq '[.vulnerabilities[]? | select(.severity == "HIGH")] | length' "$SCAN_REPORT_PATH" 2>/dev/null || echo "0")
            medium=$(jq '[.vulnerabilities[]? | select(.severity == "MEDIUM")] | length' "$SCAN_REPORT_PATH" 2>/dev/null || echo "0")
            low=$(jq '[.vulnerabilities[]? | select(.severity == "LOW")] | length' "$SCAN_REPORT_PATH" 2>/dev/null || echo "0")
            
            total_vulns=$(jq '[.vulnerabilities[]?] | length' "$SCAN_REPORT_PATH" 2>/dev/null || echo "0")
            
            echo "**Total Vulnerabilities:** $total_vulns" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $critical |" >> $GITHUB_STEP_SUMMARY
            echo "| High | $high |" >> $GITHUB_STEP_SUMMARY
            echo "| Medium | $medium |" >> $GITHUB_STEP_SUMMARY
            # echo "| Low | $low |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # List critical and high vulnerabilities with proper field names
            if [ "$critical" -gt 0 ] || [ "$high" -gt 0 ]; then
              echo "### Critical and High Severity CVEs" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              jq -r '.vulnerabilities[]? | select(.severity == "CRITICAL" or .severity == "HIGH") | "- **\(.vulnerabilityId // .id // "Unknown")** (\(.severity)): \(.packageName // .package // "Unknown package") - \(.description // "No description available")"' "$SCAN_REPORT_PATH" 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "No critical or high severity vulnerabilities found" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Show best practice violations if any
            best_practice_count=$(jq '[.bestPracticeViolations[]?] | length' "$SCAN_REPORT_PATH" 2>/dev/null || echo "0")
            if [ "$best_practice_count" -gt 0 ]; then
              echo "### Best Practice Violations ($best_practice_count)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              jq -r '.bestPracticeViolations[]? | "- **\(.code // "Unknown")**: \(.title // "No title") (\(.level // "Unknown level"))"' "$SCAN_REPORT_PATH" 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "Failed to parse best practice violations" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "üìÑ **Full report available in artifacts**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Scan results not found or scan failed**" >> $GITHUB_STEP_SUMMARY
            echo "Expected report path: $SCAN_REPORT_PATH" >> $GITHUB_STEP_SUMMARY
          fi

          # Set the summary content as a step output
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          cat $GITHUB_STEP_SUMMARY >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Upload scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-scan-results
          path: |
            ${{ steps.container-scan.outputs.scan-report-path }}
          retention-days: 30

      - name: Post notification on Slack channel
        id: deployment_message
        uses: slackapi/slack-github-action@v2.1.0
        if: always()
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "${{ steps.container-scan.outcome == 'success' && '‚úÖ' || '‚ùå' }} Vulnerability Report: ${{ steps.container-scan.outcome == 'success' && 'All okay' || 'Needs attention' }}"
            blocks:
              - type: "section"
                text:
                  type: "plain_text"
                  text: "${{ steps.container-scan.outcome == 'success' && '‚úÖ' || '‚ùå' }} Vulnerability Report: ${{ steps.container-scan.outcome == 'success' && 'All okay' || 'Needs attention' }}"

      - name: Attach the report
        uses: slackapi/slack-github-action@v2.1.0
        if: always()
        with:
          method: files.uploadV2
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            thread_ts: "${{ steps.deployment_message.outputs.ts }}"
            initial_comment: "Container Scan Results"
            file: ${{ steps.container-scan.outputs.scan-report-path }}
            filename: "container-scan-results.json"
